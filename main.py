import sys
import os
from PyQt5.QtWidgets import (
    QApplication, QWidget, QLabel, QLineEdit, QPushButton, QTextEdit,
    QVBoxLayout, QHBoxLayout, QCheckBox
)
from scaner import WebSecurityScanner

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
DARK_THEME_PATH = os.path.join(BASE_DIR, "styles", "dark_theme.qss")
LIGHT_THEME_PATH = os.path.join(BASE_DIR, "styles", "light_theme.qss")
LOLZ_THEME_PATH = os.path.join(BASE_DIR, "styles", "lolz_theme.qss")

class AdvancedScanner(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("LZT AntiVibe")
        self.setGeometry(200, 200, 1100, 700)
        self.current_theme = "dark"
        self.init_ui()
        #self.load_qss(DARK_THEME_PATH)
        self.load_qss(LOLZ_THEME_PATH)

    def init_ui(self):
        main_layout = QVBoxLayout()

        # –ö–Ω–æ–ø–∫–∞-—Å–º–∞–π–ª —Å–ø—Ä–∞–≤–∞ —Å–≤–µ—Ä—Ö—É
        # theme_layout = QHBoxLayout()
        # theme_layout.addStretch()
        # self.theme_btn = QPushButton("üåë")
        # self.theme_btn.setFixedSize(40, 40)
        # self.theme_btn.clicked.connect(self.toggle_theme)
        # self.theme_btn.setStyleSheet("font-size: 17px; border: none; background: transparent;")
        # theme_layout.addWidget(self.theme_btn)
        # main_layout.addLayout(theme_layout)

        # –ü–æ–ª–µ –¥–ª—è URL
        self.label = QLabel("–í–≤–µ–¥–∏—Ç–µ URL:")
        self.label.setStyleSheet("font-weight: bold;")
        main_layout.addWidget(self.label)
        self.url_input = QLineEdit()
        main_layout.addWidget(self.url_input)

        # ---- –ß–µ–∫–±–æ–∫—Å—ã (—Å —Ç—É–ª—Ç–∏–ø–∞–º–∏) ----
        self.sqli_checkbox = QCheckBox("SQL Injection")
        self.sqli_checkbox.setToolTip("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç—å –∫ SQL-–∏–Ω—ä–µ–∫—Ü–∏—è–º (–≤–Ω–µ–¥—Ä–µ–Ω–∏–µ –∫–æ–¥–∞ –≤ –ë–î).")

        self.xss_checkbox = QCheckBox("XSS")
        self.xss_checkbox.setToolTip("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ XSS (–º–µ–∂—Å–∞–π—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç–∏–Ω–≥).")

        self.fileinc_checkbox = QCheckBox("File Inclusion")
        self.fileinc_checkbox.setToolTip("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–∫–ª—é—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ (LFI/RFI).")

        self.ssti_checkbox = QCheckBox("SSTI")
        self.ssti_checkbox.setToolTip("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ SSTI (–≤–Ω–µ–¥—Ä–µ–Ω–∏–µ –≤ —à–∞–±–ª–æ–Ω–∏–∑–∞—Ç–æ—Ä—ã).")

        self.dirtrav_checkbox = QCheckBox("Directory Traversal")
        self.dirtrav_checkbox.setToolTip("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ Directory Traversal (—á—Ç–µ–Ω–∏–µ —á—É–∂–∏—Ö —Ñ–∞–π–ª–æ–≤).")

        self.middleware_checkbox = QCheckBox("Middleware Header")
        self.middleware_checkbox.setToolTip("–¢–µ—Å—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ X-Middleware-Subrequest.")

        self.captcha_checkbox = QCheckBox("CAPTCHA Check")
        self.captcha_checkbox.setToolTip("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–∞ —Å–∞–π—Ç–µ CAPTCHA.")

        self.ssrf_checkbox = QCheckBox("SSRF")
        self.ssrf_checkbox.setToolTip("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ SSRF (—Å–µ—Ä–≤–µ—Ä –º–æ–∂–µ—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–º—É –∞–¥—Ä–µ—Å—É).")

        self.openredir_checkbox = QCheckBox("Open Redirect")
        self.openredir_checkbox.setToolTip("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ Open Redirect (–ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –≤–Ω–µ—à–Ω–∏–π —Å–∞–π—Ç).")

        self.hosthdr_checkbox = QCheckBox("Host Header Injection")
        self.hosthdr_checkbox.setToolTip("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∑–∞–≥–æ–ª–æ–≤–æ–∫ Host.")

        self.method_checkbox = QCheckBox("HTTP Method Fuzz")
        self.method_checkbox.setToolTip("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö HTTP-–º–µ—Ç–æ–¥–æ–≤ (OPTIONS, PUT, DELETE –∏ –¥—Ä.).")

        self.secheaders_checkbox = QCheckBox("Security Headers")
        self.secheaders_checkbox.setToolTip("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤–∞–∂–Ω—ã—Ö HTTP-–∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.")

        self.infoleak_checkbox = QCheckBox("Info Leak")
        self.infoleak_checkbox.setToolTip("–ü–æ–∏—Å–∫ —Å–ª–µ–¥–æ–≤ —É—Ç–µ—á–µ–∫: debug, password, API key –∏ –¥—Ä.")

        # Layout —á–µ–∫–±–æ–∫—Å–æ–≤ (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ, —Å–ª–µ–≤–∞)
        checkboxes_layout = QVBoxLayout()
        for cb in [
            self.sqli_checkbox, self.xss_checkbox, self.fileinc_checkbox, self.ssti_checkbox,
            self.dirtrav_checkbox, self.middleware_checkbox, self.captcha_checkbox,
            self.ssrf_checkbox, self.openredir_checkbox, self.hosthdr_checkbox,
            self.method_checkbox, self.secheaders_checkbox, self.infoleak_checkbox
        ]:
            checkboxes_layout.addWidget(cb)
        checkboxes_layout.addStretch(1)

        # –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å (–∫–Ω–æ–ø–∫–∞ + –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)
        right_layout = QVBoxLayout()
        self.scan_button = QPushButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
        self.scan_button.clicked.connect(self.scan_site)
        self.scan_button.setFixedHeight(40)
        right_layout.addWidget(self.scan_button)
        self.result_area = QTextEdit()
        self.result_area.setReadOnly(True)
        right_layout.addWidget(self.result_area)

        # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π layout: —á–µ–∫–±–æ–∫—Å—ã —Å–ª–µ–≤–∞, —Å–∫–∞–Ω –∏ –≤—ã–≤–æ–¥ ‚Äî —Å–ø—Ä–∞–≤–∞
        horizontal_layout = QHBoxLayout()
        horizontal_layout.addLayout(checkboxes_layout, 1)
        horizontal_layout.addLayout(right_layout, 3)

        main_layout.addLayout(horizontal_layout)
        self.setLayout(main_layout)

    def load_qss(self, path):
        try:
            with open(path, "r", encoding='utf-8') as f:
                self.setStyleSheet(f.read())
        except Exception as e:
            self.result_area.setText(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ QSS: {e}")

    def toggle_theme(self):
        if self.current_theme == "dark":
            self.load_qss(LIGHT_THEME_PATH)
            self.theme_btn.setText("üåï")
            self.current_theme = "light"
        else:
            self.load_qss(DARK_THEME_PATH)
            self.theme_btn.setText("üåë")
            self.current_theme = "dark"

    def scan_site(self):
        url = self.url_input.text().strip()
        if not url.startswith("http"):
            url = "http://" + url
        report = ""
        scanner = WebSecurityScanner(timeout=15)

        if self.sqli_checkbox.isChecked():
            res = scanner.check_sql_injection(url)
            report += "[SQL Injection]: " + ("–£—è–∑–≤–∏–º–æ—Å—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞!\n" if res else "–£—è–∑–≤–∏–º–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n")

        if self.xss_checkbox.isChecked():
            res = scanner.check_xss(url)
            report += "[XSS]: " + ("–£—è–∑–≤–∏–º–æ—Å—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞!\n" if res else "–£—è–∑–≤–∏–º–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n")

        if self.fileinc_checkbox.isChecked():
            res = scanner.check_file_inclusion(url)
            report += "[File Inclusion]: " + ("–£—è–∑–≤–∏–º–æ—Å—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞!\n" if res else "–£—è–∑–≤–∏–º–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n")

        if self.ssti_checkbox.isChecked():
            res = scanner.check_ssti(url)
            report += "[SSTI]: " + ("–£—è–∑–≤–∏–º–æ—Å—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞!\n" if res else "–£—è–∑–≤–∏–º–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n")

        if self.dirtrav_checkbox.isChecked():
            res = scanner.check_directory_traversal(url)
            report += "[Directory Traversal]: " + ("–£—è–∑–≤–∏–º–æ—Å—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞!\n" if res else "–£—è–∑–≤–∏–º–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n")

        if self.middleware_checkbox.isChecked():
            res = scanner.check_middleware_header(url)
            report += "[Middleware Header]: " + ("–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç/–æ—Ç–≤–µ—á–∞–µ—Ç!\n" if res else "–ù–µ—Ç —Ä–µ–∞–∫—Ü–∏–∏/–æ—Ç–≤–µ—Ç–∞.\n")

        if self.captcha_checkbox.isChecked():
            res = scanner.check_captcha(url)
            if res:
                report += f"[CAPTCHA]: –ù–∞–π–¥–µ–Ω–∞ ‚Äî {res}\n"
            else:
                report += "[CAPTCHA]: –ù–µ –Ω–∞–π–¥–µ–Ω–∞\n"

        if self.ssrf_checkbox.isChecked():
            res = scanner.check_ssrf(url)
            report += "[SSRF]: " + ("–£—è–∑–≤–∏–º–æ—Å—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞!\n" if res else "–£—è–∑–≤–∏–º–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n")

        if self.openredir_checkbox.isChecked():
            res = scanner.check_open_redirect(url)
            report += "[Open Redirect]: " + ("–£—è–∑–≤–∏–º–æ—Å—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞!\n" if res else "–£—è–∑–≤–∏–º–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n")

        if self.hosthdr_checkbox.isChecked():
            res = scanner.check_host_header_injection(url)
            report += "[Host Header Injection]: " + ("–£—è–∑–≤–∏–º–æ—Å—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞!\n" if res else "–£—è–∑–≤–∏–º–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n")

        if self.method_checkbox.isChecked():
            res = scanner.check_http_method_fuzz(url)
            if res:
                report += f"[HTTP Method Fuzz]: –†–∞–∑—Ä–µ—à–µ–Ω –º–µ—Ç–æ–¥: {res}\n"
            else:
                report += "[HTTP Method Fuzz]: –í—Å–µ –ª–∏—à–Ω–∏–µ –º–µ—Ç–æ–¥—ã –∑–∞–ø—Ä–µ—â–µ–Ω—ã.\n"

        if self.secheaders_checkbox.isChecked():
            missing = scanner.check_security_headers(url)
            if missing:
                report += "[Security Headers]: –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: " + ", ".join(missing) + "\n"
            else:
                report += "[Security Headers]: –í—Å–µ –∫–ª—é—á–µ–≤—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç.\n"

        if self.infoleak_checkbox.isChecked():
            leaks = scanner.check_info_leak(url)
            if leaks:
                report += "[Info Leak]: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å–ª–µ–¥—ã: " + ", ".join(leaks) + "\n"
            else:
                report += "[Info Leak]: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–ª–µ–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n"

        self.result_area.setText(report)

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = AdvancedScanner()
    window.show()
    sys.exit(app.exec_())
